using Microsoft.Xna.Framework;
using MonoGame.Extended.Entities;
using MonoGame.Extended.Entities.Systems;
using SolarOdyssey.Component;

namespace SolarOdyssey.System.Update
{
    internal class InvulnerabilitySystem: EntityProcessingSystem
    {
        public InvulnerabilitySystem() 
            : base(Aspect.All(typeof(InvulnerabilityComponent)))
        {
        }

        public override void Initialize(IComponentMapperService mapperService)
        {
        }

        public override void Process(GameTime gameTime, int entityId)
        {
            var entity = GetEntity(entityId);
            var invuln = entity.Get<InvulnerabilityComponent>();
            var renderable = entity.Get<RenderableComponent>();

            if (!invuln.IsInvulnerable)
            {
                if (renderable != null)
                {
                    renderable.Opacity = 1.0f;
                }

                return;
            }

            invuln.Current += gameTime.ElapsedGameTime;

            if (renderable != null)
            {
                renderable.Opacity = 0.3f;
            }
        }
    }
}
